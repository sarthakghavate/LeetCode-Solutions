// 223. Rectangle Area
class Solution {
    public int computeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {
        int area1 = calRect(ax1,ay1,ax2,ay2);
        int area2 = calRect(bx1,by1,bx2,by2);
        int total = area1+area2;

        int count1 = 0 ; int count2 =0;
        Set <Integer>  xRange = new HashSet<>();
        Set <Integer>  yRange = new HashSet<>();

        for(int i = ax1 ; i <= ax2 ; i++){
            xRange.add(i);
        }
        for(int i = bx1 ; i <= bx2 ; i++){
            if(!xRange.add(i)){
                count1++;
            }
        }
        for(int i = ay1 ; i <= ay2 ; i++){
            yRange.add(i);
        }
        for(int i = by1 ; i <= by2 ; i++){
            if(!yRange.add(i)){
                count2++;
            }
        }

        if(count2 == 0 || count1 == 0){
            return total;
        }

        int extra = (count1-1)*(count2-1);

        return total-extra;

    }
    private int calRect(int x1,int y1 , int x2 , int y2){
        return (x2-x1)*(y2-y1);
    }

    // Optimal

    public int computeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {
        int area1 = (ax2-ax1)*(ay2-ay1);
        int area2 = (bx2-bx1)*(by2-by1);
        int totalArea = area1 + area2;

        // we have to reduce the ovelapped area ]
        // so first get the coordinates of overlapped rectange
        // observe that how to get those coordinates

        int x1 = Math.max(ax1,bx1);
        int x2 = Math.min(ax2,bx2);

        int y1 = Math.max(ay1,by1);
        int y2 = Math.min(ay2,by2);


        int overlapArea = Math.max(0,x2-x1) * Math.max(0,y2-y1);

        return totalArea - overlapArea;

    }

}
