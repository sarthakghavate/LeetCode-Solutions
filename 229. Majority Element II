// Problem :https://leetcode.com/problems/majority-element-ii/
// video sol : https://www.youtube.com/watch?v=vwZj1K0e9U8
class Solution {
    public List<Integer> majorityElement(int[] nums) {
       ArrayList<Integer> list = new ArrayList<>();
       //Apply Moore's Voting Algorithm
       int element1 = 0;int count1   = 0;int element2 = 0;int count2   = 0;
       for(int i=0;i<nums.length;i++){
           if(count1==0 && nums[i] != element2){
               count1 = 1;
               element1 = nums[i];
           }
           else if(count2==0 && nums[i] != element1){
               count2 = 1;
               element2 = nums[i];
           }
           else if(nums[i] == element1){
               count1++;
           }
           else if(nums[i] == element2){
               count2++;
           }
           else{
               count1--;
               count2--;
           }
       }
       //above loop will give 2 possible elements as element1 and element2 
       //that could be majority element
        int MajorityCount = (nums.length / 3);
        // reset count1 and count2
        count1 = 0;
        count2 = 0;
       for(int i=0;i<nums.length;i++){
           if(nums[i] == element1){
                count1++;
           }
           else if(nums[i] == element2){
               count2++;
           }
          
       }
       if(count1 > MajorityCount){
           list.add(element1);
       }
       if(count2 > MajorityCount){
           list.add(element2);
       }
       return list;
    }
}
